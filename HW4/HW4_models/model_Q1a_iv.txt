#clear memory
reset;

#choose solver;
option solver cplex;

#create sets to define variables
set Years = {1,2,3}; #years for bank investments
set ProjectIDs = {1,2,3,4,5}; #ID corresponding to each project: 1=A, 2=B,..., 5=E

#initialize model parameters
param initInv; #initial amount to be invested in dollars
param riskCoeff {p in ProjectIDs}; #risk per dollar for each project (for part iv)

#Set problem variables
var x {i in ProjectIDs} >= 0; #dollars invested in project i
var xb {i in Years} >= 0; #dollars invested in bank for year i
var risk = sum{i in ProjectIDs} x[i] * riskCoeff[i]; #total risk from investing in projects

#the following are specified by Fig. 1 in the homework PDF

#set objective function
maximize investment_return: x[2] + 1.4*x[5] + 1.75*x[4] + 1.06*xb[3];

#specify constraints
s.t. c1: x[1] + x[3] + x[4] + xb[1] = initInv;
s.t. c2: .3*x[1] + 1.1*x[3] + 1.06 * xb[1] = x[2] + xb[2];
s.t. c3: x[1] + .3*x[2] + 1.06*xb[2] = x[5] + xb[3];

#add project investment limits (see HW2)
s.t. limA: x[1] <= 500000;
s.t. limB: x[2] <= 500000;
s.t. limE: x[5] <= 750000;

#epsilon constraint
param epsilon;
s.t. epsilonConstraint: risk <= epsilon; #we will vary epsilon from 0 (minimum risk) to 182950 (maximum risk)

#load data
data HW4/data_Q1a_iv.txt

#solve the model for each epsilon increment
for {i in 0..19} {
	let epsilon := i * (182950 / 19); #we want to reach our maximum risk after 20 steps
	solve;

	#display the resulting investment return and investments
	printf "\nWith epsilon %f, we see a total return of: %f \n", epsilon, investment_return;
}